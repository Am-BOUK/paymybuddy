package pay.my.buddy.web;

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import pay.my.buddy.dal.CompteRepository;
import pay.my.buddy.entities.Client;
import pay.my.buddy.entities.Compte;

/**
 * Implementing the management of interactions between the application user and
 * the application.
 *
 */
@RestController
public class CompteRestService {
	private static final Logger logger = LogManager.getLogger("CompteRestService");

	/**
	 * implementation of compte business processing
	 * 
	 */
	@Autowired
	private CompteRepository compteRepository;

	/**
	 * Read - Get all comptes
	 * 
	 * @return list of comptes
	 */
	@RequestMapping(value = "/comptes", method = RequestMethod.GET)
	public List<Compte> getAllComptes() {
		logger.info("Getting All Comptes");
		return compteRepository.findAll();
	}

	/**
	 * Read-Get one client by email
	 * 
	 * @param email
	 * @return a client object full filled
	 */
	@RequestMapping(value = "/compte/{codeCompte}", method = RequestMethod.GET)
	public Optional<Compte> getClientByCodeCompte(@PathVariable String codeCompte) {
		logger.info("Getting client by email");
		return compteRepository.findById(codeCompte);
	}
	/**
	 * Read-Get list clients by name
	 * 
	 * @param name
	 * @return a list of clients object full filled per page
	 */
	@RequestMapping(value = "/compte", method = RequestMethod.GET)
	public Page<Compte> findComptesByEmail(@RequestParam(name = "email", defaultValue = "") String email,
			@RequestParam(name = "page", defaultValue = "0") int page,
			@RequestParam(name = "size", defaultValue = "5") int size) {
		logger.info("getting list of clients by name per page");
		return compteRepository.findComptesByEmail("%" + email + "%", PageRequest.of(page, size));
	}
}
