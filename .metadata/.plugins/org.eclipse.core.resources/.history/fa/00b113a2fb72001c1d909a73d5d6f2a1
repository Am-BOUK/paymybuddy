package pay.my.buddy.web;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import pay.my.buddy.entities.Compte;
import pay.my.buddy.entities.Operation;
import pay.my.buddy.service.ICompteMetier;
import pay.my.buddy.service.IOperationMetier;

@Controller
public class OperationController {
	private static final Logger logger = LogManager.getLogger("OperationController");
	/**
	 * implementation of client business processing
	 * 
	 */
	@Autowired
	private IOperationMetier operationMetier;

	@Autowired
	private ICompteMetier compteMetier;

//	/**
//	 * Read - Get all operations
//	 * 
//	 * @return list of operations
//	 */
//	@RequestMapping(value = "/operations", method = RequestMethod.GET)
//	public String getAllOperations(Model model) {
//		logger.info("Getting All operations");
//		List<Operation> operations = operationMetier.listAllOperations();
//		model.addAttribute("operations", operations);
//		return "operations/operationsList";
//	}

	@RequestMapping(value = "/saveOperation", method = RequestMethod.POST)
	public String saveOperation(Model model, String typeOperation, Long idCompte, double amount, String description,
			String email) {
		logger.info("save operation");

		try {
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			String clientEmail = authentication.getName();
			Compte clientFound = compteMetier.findCompteByClientEmail(clientEmail);
			idCompte = clientFound.getIdCompte();

			if (typeOperation.equals("VERS")) {
				logger.info("save payment operation");
				operationMetier.verser(idCompte, amount, description);
			} else if (typeOperation.equals("RETR")) {
				logger.info("save withdraw operation");
				operationMetier.retirer(idCompte, amount, description);
			} else if (typeOperation.equals("VIR")) {
				logger.info("save transfer operation");
				operationMetier.virement(idCompte, email, amount, description);
			}
		} catch (Exception e) {
			model.addAttribute("error", e);
			return "redirect:/compte?idCompte=" + idCompte + "&error=" + e.getMessage();
		}

		return "redirect:/compte?idCompte=" + idCompte;

	}

}
