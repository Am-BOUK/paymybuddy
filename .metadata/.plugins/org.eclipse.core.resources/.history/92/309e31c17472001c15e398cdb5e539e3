package pay.my.buddy.service;

import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pay.my.buddy.constants.Fare;
import pay.my.buddy.dal.CompteRepository;
import pay.my.buddy.dal.OperationRepository;
import pay.my.buddy.entities.Compte;
import pay.my.buddy.entities.Operation;
import pay.my.buddy.entities.Retrait;
import pay.my.buddy.entities.Versement;
import pay.my.buddy.entities.VirementReceive;
import pay.my.buddy.entities.VirementSent;

@Service
@Transactional
public class OperationMetrierImpl implements IOperationMetier {
	private static final Logger logger = LogManager.getLogger("PayMyBuddyMetrierImpl");
	@Autowired
	private CompteRepository compteRepository;
	@Autowired
	private OperationRepository operationRepository;
	
	@Autowired
	private ICompteMetier compteMetier;



	@Override
	public void verser(Long idCompte, double montant, String description) throws Exception {
		logger.info("verser dans le compte numéro : " + idCompte);
		Compte compte = compteMetier.consulterCompte(idCompte);
		Versement versement = new Versement(new Date(), montant, description, compte);
		double facturation = montant * Fare.FACTURATION;
		versement.setFacturation(facturation);
		operationRepository.save(versement);
		compte.setAmount(compte.getAmount() + montant - facturation);
		compteRepository.save(compte);
		logger.info("versement effectué avec succée");

	}

	@Override
	public void retirer(Long idCompte, double montant, String description) throws Exception {
		logger.info("retirer du compte numéro : " + idCompte);
		Compte compte = compteMetier.consulterCompte(idCompte);
		double facturation = montant * Fare.FACTURATION;
		if (compte.getAmount() < montant + facturation) {
			throw new Exception("Solde insuffisant!");
		}
		Retrait retrait = new Retrait(new Date(), montant, description, compte);
		retrait.setFacturation(facturation);
		operationRepository.save(retrait);
		compte.setAmount(compte.getAmount() - montant - facturation);
		compteRepository.save(compte);
		logger.info("retrait effectué avec succée");

	}

	
	@Override
	public void virement(Long idSender, String emailReceiper, double montant, String description) throws Exception {
		logger.info("virement du compte numéro : " + idSender + " vers le compte numéro : " + emailReceiper);
		
		Compte compteRecipient = compteMetier.findCompteByClientEmail(emailReceiper);

		if (idSender.equals(compteRecipient.getIdCompte())) {
			throw new Exception("Opération impossible : virement sur le même compte");
		}
		Compte compteSender = compteMetier.consulterCompte(idSender);
		double facturation = montant * Fare.FACTURATION;

		if (compteSender.getAmount() < montant + facturation) {
			throw new Exception("Solde insuffisant!");
		}

		compteSender.setAmount(compteSender.getAmount() - montant - facturation);
		compteRepository.save(compteSender);

		

		compteRecipient.setAmount(compteRecipient.getAmount() + montant);
		compteRepository.save(compteRecipient);

		VirementSent virementSent = new VirementSent(new Date(), montant, description, compteSender, compteRecipient.getIdCompte());
		VirementReceive virementReceive = new VirementReceive(new Date(), montant, description, compteRecipient,
				idSender);
		virementSent.setFacturation(facturation);
		virementSent.setNameRecipient(compteRecipient.getClient().getLastName());
		virementReceive.setNameSender(compteSender.getClient().getLastName());
		operationRepository.save(virementSent);
		operationRepository.save(virementReceive);
		logger.info("virement effectué avec succée");

	}

	@Override
	public Page<Operation> listOperation(Long idCompte, int page, int size) {
		logger.info("liste des opération par page");
		return operationRepository.listOperation(idCompte, PageRequest.of(page, size));
	}

	@Override
	public List<Operation> listAllOperations(){
		logger.info("liste de toutes les opérations");
		return operationRepository.findAll();
	}
}
