package pay.my.buddy.security;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import pay.my.buddy.dal.ClientRepository;
import pay.my.buddy.entities.Client;

@Component
public class AuthProvider implements AuthenticationProvider {

	@Autowired
	private ClientRepository clientRepository;

	@Autowired
	private PasswordEncoder pEncorder;

	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		String username = authentication.getName();
		String password = authentication.getCredentials().toString();

		Optional<Client> client = clientRepository.findClientByEmail(username);
		if (client.isPresent()) {
			if (pEncorder.matches(password, client.get().getPassword())){
//			if (password.equals(client.get().getPassword())) {
				return new UsernamePasswordAuthenticationToken(username, password);
			} else {
				throw new BadCredentialsException("Invalid password");
			}
		} else {
			throw new BadCredentialsException("No user registered with this details");

		}
	}

	@Override
	public boolean supports(Class<?> authentication) {
		return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}
	

}