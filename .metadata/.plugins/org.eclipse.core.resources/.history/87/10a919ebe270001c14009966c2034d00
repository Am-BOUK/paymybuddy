package pay.my.buddy.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.Valid;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import pay.my.buddy.dal.OperationRepository;
import pay.my.buddy.entities.Compte;
import pay.my.buddy.entities.Operation;
import pay.my.buddy.entities.Retrait;
import pay.my.buddy.entities.Versement;
import pay.my.buddy.service.ICompteMetier;
import pay.my.buddy.service.IOperationMetier;

@Controller
public class OperationController {
	private static final Logger logger = LogManager.getLogger("OperationRestService");
	/**
	 * implementation of client business processing
	 * 
	 */
	@Autowired
	private OperationRepository operationRepository;
	@Autowired
	private IOperationMetier operationMetier;

	
	@Autowired
	private ICompteMetier compteMetier;
	/**
	 * Read - Get all operations
	 * 
	 * @return list of operations
	 */
	@RequestMapping(value = "/operations", method = RequestMethod.GET)
	public String getAllOperations(Model model) {
		logger.info("Getting All operations");
		List<Operation> operations = operationRepository.findAll();
		model.addAttribute("operations", operations);
		return "operations/operationsList";
	}
	
	@RequestMapping(value = "/saveOperation", method = RequestMethod.POST)
	public String saveOperation(Model model, String typeOperation, Long idCompte, double amount, String description,
			String email) {
		try {
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			String clientEmail = authentication.getName();
			Compte clientFound= compteMetier.findCompteByClientEmail(clientEmail);
			idCompte=clientFound.getIdCompte();
			
			if (typeOperation.equals("VERS")) {
				operationMetier.verser(idCompte, amount, description);
			} else if (typeOperation.equals("RETR")) {
				operationMetier.retirer(idCompte, amount, description);
			} else if (typeOperation.equals("VIR")) {
				operationMetier.virement(idCompte, email, amount, description);
			} 
		} catch (Exception e) {
			model.addAttribute("error", e);
			return "redirect:/compte?idCompte=" + idCompte + "&error=" + e.getMessage();
		}

		return "redirect:/compte?idCompte=" + idCompte;

	}

	/**
	 * Create - Add a new versement
	 * 
	 * @param operation
	 * @return operation object added
	 * @throws Exception
	 */
	@RequestMapping(value = "/operation/versement", method = RequestMethod.POST)
	public Operation saveVersement(@Valid @RequestBody Operation operation) throws Exception {
		Versement v = new Versement();
		v.setDateOperation(operation.getDateOperation());
		v.setAmount(operation.getAmount());
		v.setCompte(operation.getCompte());
		v.setDescription(operation.getDescription());

		operationMetier.verser(v.getCompte().getIdCompte(), v.getAmount(), v.getDescription());

		return operation;
	}

	/**
	 * Create - Add a new retrait
	 * 
	 * @param operation
	 * @return operation object added
	 * @throws Exception
	 */
	@RequestMapping(value = "/operation/retrait", method = RequestMethod.POST)
	public Operation saveRetrait(@Valid @RequestBody Operation operation) throws Exception {
		Retrait r = new Retrait();
		r.setDateOperation(operation.getDateOperation());
		r.setAmount(operation.getAmount());
		r.setCompte(operation.getCompte());
		r.setDescription(operation.getDescription());

		operationMetier.retirer(r.getCompte().getIdCompte(), r.getAmount(), r.getDescription());

		return operation;
	}


}
