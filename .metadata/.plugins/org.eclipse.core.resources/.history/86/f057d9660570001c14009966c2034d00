package pay.my.buddy.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
//	@Override
//	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//		PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
//		auth.inMemoryAuthentication().withUser("admin").password(encoder.encode("1234")).roles("ADMIN", "USER");
//		auth.inMemoryAuthentication().withUser("user").password(encoder.encode("1234")).roles("USER");
//	}
//
	@Override
	protected void configure(HttpSecurity http) throws Exception {
//		http.formLogin();
//		http.formLogin().loginPage("/login");
//		http.authorizeHttpRequests().antMatchers("/compte").hasRole("USER");
//		http.authorizeHttpRequests().antMatchers("/operations", "/clients");
		http.authorizeHttpRequests().anyRequest().permitAll().and().formLogin().defaultSuccessUrl("/compte", true);
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

//	@Autowired
//	private UserDetailsService userDetailsService;

	/**
	 * specific Authentication
	 * 
	 * @return AuthenticationProvider
	 */
//	@Bean
//	public AuthenticationProvider authenticationProvider() {
//		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
//		
//		System.out.println("*******************************");
//		PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
//		System.out.println(encoder.encode("amal123"));
//		System.out.println("*******************************");
//		
//		provider.setUserDetailsService(userDetailsService);
//		provider.setPasswordEncoder(encoder);
//
//		return provider;
//
//	}

}
