package pay.my.buddy.web;
/**
 * Implementing the management of interactions between the application user and
 * the application.
 *
 */

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import pay.my.buddy.dal.OperationRepository;
import pay.my.buddy.entities.Compte;
import pay.my.buddy.entities.Operation;

@RestController
public class OperationRestService {
	private static final Logger logger = LogManager.getLogger("OperationRestService");
	/**
	 * implementation of client business processing
	 * 
	 */
	@Autowired
	private OperationRepository operationRepository;
	
	/**
	 * Read - Get all operations
	 * 
	 * @return list of operations
	 */
	@RequestMapping(value = "/operations", method = RequestMethod.GET)
	public List<Operation> getAllOperations() {
		logger.info("Getting All operations");
		return operationRepository.findAll();
	}
	
	/**
	 * Read-Get one operation by operation Id
	 * 
	 * @param operationId
	 * @return a operation object full filled
	 */
	@RequestMapping(value = "/operation/{operationId}", method = RequestMethod.GET)
	public Optional<Operation> getClientByCodeCompte(@PathVariable Long operationId) {
		logger.info("Getting client by email");
		return operationRepository.findById(operationId);
	}
	
	/**
	 * Read-Get list operations by codeCompte
	 * 
	 * @param email
	 * @return a list of operations object full filled per page
	 */
	@RequestMapping(value = "/operation", method = RequestMethod.GET)
	public Page<Operation> findOperationsByCodeCompte(@RequestParam(name = "codeCompte", defaultValue = "") String codeCompte,
			@RequestParam(name = "page", defaultValue = "0") int page,
			@RequestParam(name = "size", defaultValue = "5") int size) {
		logger.info("getting list of clients by name per page");
		return operationRepository.listOperation("%" + codeCompte + "%", PageRequest.of(page, size));
	}
	
	/**
	 * Read-Get list operations by codeCompte
	 * 
	 * @param email
	 * @return a list of operations object full filled per page
	 */
	@RequestMapping(value = "/operations", method = RequestMethod.GET)
	public Page<Operation> findOperationsByEmail(@RequestParam(name = "email", defaultValue = "") String email,
			@RequestParam(name = "page", defaultValue = "0") int page,
			@RequestParam(name = "size", defaultValue = "5") int size) {
		logger.info("getting list of clients by name per page");
		return operationRepository.listOperationByEmail("%" + email + "%", PageRequest.of(page, size));
	}
}
